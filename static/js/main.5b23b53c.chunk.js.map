{"version":3,"sources":["components/apiKey.js","images/branding copy.png","components/Nav.jsx","components/Footer.jsx","components/Forecast.jsx","images/loader.gif","components/CurrentLocation.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","key","process","base","Nav","className","href","alt","src","brandLogo","Footer","year","Date","getFullYear","Forecast","props","useState","query","setQuery","error","setError","weather","setWeather","search","city","axios","get","apiKeys","then","response","data","catch","console","log","message","defaults","useEffect","icon","color","size","animate","type","placeholder","onChange","e","target","value","onClick","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","dateBuilder","d","day","getDay","date","getDate","month","getMonth","Weather","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","api_call","json","setState","feels_like","wind_speed","this","position","coords","latitude","longitude","err","alert","timerID","setInterval","clearInterval","Fragment","id","format","interval","ticking","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","React","Component","App","CurrentLocation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b23b53c.chunk.js","sourcesContent":["module.exports = {\n    key: process.env.REACT_APP_API_KEY,\n    base: \"https://api.openweathermap.org/data/2.5/\",\n  };","export default __webpack_public_path__ + \"static/media/branding copy.62c481d4.png\";","import React from \"react\";\nimport brandLogo from \"../images/branding copy.png\";\n\nfunction Nav() {\n  \n  return (\n    <div data-testid=\"Nav\" className=\"Nav\">\n      <nav>\n        <a href=\"/\" alt=\"home link\"><img className=\"brandLogo\" src={brandLogo} alt=\"brand logo\" /></a>\n\n      </nav>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\nfunction Footer() {\n  let year = new Date().getFullYear();\n  return (\n    <div data-testid=\"Footer\" className=\"footer\">\n      <p>Mervyn Levis {year} </p>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKey\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport Footer from \"./Footer\";\n\nfunction Forecast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  // fetch weather information based on user query string. default is set to Cork, so that will be initially displayed\n  const search = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city != \"[object Object]\" ? city : query //used != rather than !== here as ran into error with weather search when using !== syntax\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n\n//   function checkTime(i) {\n//     if (i < 10) {\n//       i = \"0\" + i;\n//     } // add zero in front of numbers < 10\n//     return i;\n//   }\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  // empty array so avoid duplicate API calls \n  useEffect(() => {\n    search(\"Cork\");\n  }, []);\n\n  // render component with api data \n  return (\n    <div data-testid='searchedForecast' className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={search}\n              alt=\"search button\"\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main != \"undefined\" ? (\n            <div>\n              {\" \"}\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                  alt=\"weather logo\"\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}°c ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n      <Footer />\n    </div>\n  );\n}\nexport default Forecast;","export default __webpack_public_path__ + \"static/media/loader.d4a3a029.gif\";","import React from \"react\";\nimport apiKeys from \"./apiKey\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./Forecast\";\nimport loader from \"../images/loader.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\n// data builder function used to speed up generation of user location data\n\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\n// used class based component for this to use componentDidMount etc\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        // if location services active, will fetch api data and send to getWeather\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          // if no location services then standard location weather for Dublin will be displayed\n          this.getWeather(53.34, -6.26);\n          alert(\n            \"Location Services Disabled. Please allow location access to use this app.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    // every hour, run getWeather again with the latitude and longitude in state \n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n//   clear interval on componentWillUnmount \n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n\n  // get user current location\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n//   fetch weather information based on the users lat and lon as described above\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      feels_like: Math.round(data.main.feels_like),\n      visibility: data.visibility,\n      wind_speed: data.wind.speed,\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n//   render component information \n\n  render() {\n    // if weather information loaded \n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div data-testid=\"userLocationWeather\" className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}, {this.state.country}</h2>\n              <h3>Feels Like: {this.state.feels_like}°c</h3>\n              <h4>Humidity: {this.state.humidity}%</h4>\n              <h4>Visibility: {this.state.visibility} mi</h4>\n              <h4>Wind Speed: {this.state.wind_speed} Km/h</h4>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°c\n                </p>\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n        // if weather information not yet loaded. This is the initial loading screen of the app \n      return (\n        <React.Fragment>\n          <div data-testid=\"LoadingCurrentLocation\" className=\"loadingPage\">\n            <img\n              src={loader}\n              alt=\"loading icon\"\n              style={{ width: \"5%\", WebkitUserDrag: \"none\" }}\n            />\n            <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n              Detecting your location\n            </h3>\n            <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n              Location will be displayed with weather...\n            </h3>\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport CurrentLocation from \"./components/CurrentLocation\";\nimport \"./App.css\";\n// import Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Nav />\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n      {/* <Footer /> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
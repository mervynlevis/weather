{"version":3,"sources":["components/apiKey.js","components/Nav.jsx","components/Footer.jsx","components/Forecast.jsx","images/loader.gif","components/CurrentLocation.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","key","process","base","Nav","className","href","alt","Footer","year","Date","getFullYear","Forecast","props","useState","query","setQuery","searchCountry","setSearchCountry","error","setError","weather","setWeather","search","city","axios","get","apiKeys","then","response","data","catch","console","log","message","defaults","useEffect","icon","color","size","animate","type","placeholder","onChange","e","target","value","onClick","main","name","sys","country","src","Math","round","temp","humidity","visibility","wind","speed","dateBuilder","d","day","getDay","date","getDate","month","getMonth","Weather","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","api_call","json","setState","feels_like","wind_speed","this","position","coords","latitude","longitude","err","alert","timerID","setInterval","clearInterval","Fragment","id","format","interval","ticking","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","React","Component","App","CurrentLocation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5324f6b.chunk.js","sourcesContent":["module.exports = {\n    key: process.env.REACT_APP_API_KEY,\n    base: \"https://api.openweathermap.org/data/2.5/\",\n  };","import React from \"react\";\n// import brandLogo from \"../images/branding copy.png\";\nimport BeachAccessIcon from '@mui/icons-material/BeachAccess';\n\nfunction Nav() {\n  \n  return (\n    <div data-testid=\"Nav\" className=\"Nav\">\n      <nav>\n        {/* <a href=\"/\" alt=\"home link\"><img className=\"brandLogo\" src={brandLogo} alt=\"brand logo\" /></a> */}\n        <a href=\"/\" alt=\"home link\" className=\"brandLogo\"><BeachAccessIcon /></a>\n      </nav>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\nfunction Footer() {\n  let year = new Date().getFullYear();\n  return (\n    <div data-testid=\"Footer\" className=\"footer\">\n      <p>Mervyn Levis {year} </p>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKey\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Footer from \"./Footer\";\n\nfunction Forecast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [searchCountry, setSearchCountry] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  // fetch weather information based on user query string. default is set to Cork, so that will be initially displayed\n  //used != rather than !== here as ran into error with weather search when using !== syntax\n\n  const search = (city) => {\n    axios\n      .get(\n          // eslint-disable-next-line\n        `${apiKeys.base}weather?q=${city != \"[object Object]\" ? city : query\n        },${searchCountry}&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n        setSearchCountry(\"\");\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setSearchCountry(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n\n  //   function checkTime(i) {\n  //     if (i < 10) {\n  //       i = \"0\" + i;\n  //     } // add zero in front of numbers < 10\n  //     return i;\n  //   }\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  // empty array so avoid duplicate API calls, disabled eslint warning.\n  useEffect(() => {\n    search(\"Cork\");\n      // eslint-disable-next-line\n  }, []);\n\n  // render component with api data\n  // if there is weather information, render it. Otherwise, render the error message\n\n  return (\n    <div data-testid=\"searchedForecast\" className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search City\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Country Code\"\n            onChange={(e) => setSearchCountry(e.target.value)}\n            value={searchCountry}\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <SearchIcon className=\"img-box\" onClick={search} />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main != \"undefined\" ? (\n            <div>\n              {\" \"}\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                  alt=\"weather logo\"\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}°c ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n      <Footer />\n    </div>\n  );\n}\nexport default Forecast;\n","export default __webpack_public_path__ + \"static/media/loader.d4a3a029.gif\";","import React from \"react\";\nimport apiKeys from \"./apiKey\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./Forecast\";\nimport loader from \"../images/loader.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\n// data builder function used to speed up generation of user location data\n\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\n// used class based component for this to use componentDidMount etc\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        // if location services active, will fetch api data and send to getWeather\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          // if no location services then standard location weather for Dublin will be displayed\n          this.getWeather(53.34, -6.26); //lat lon for Dublin, Ireland\n          alert(\n            \"Location Services Disabled. Please allow location access to use this app.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    // every hour, run getWeather again with the latitude and longitude in state \n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n//   clear interval on componentWillUnmount \n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n\n  // get user current location\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n//   fetch weather information based on the users lat and lon as described above\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      feels_like: Math.round(data.main.feels_like),\n      visibility: data.visibility,\n      wind_speed: data.wind.speed,\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n//   render component information \n\n  render() {\n    // if weather information loaded \n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div data-testid=\"userLocationWeather\" className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}, {this.state.country}</h2>\n              <h3>Feels Like: {this.state.feels_like}°c</h3>\n              <h4>Humidity: {this.state.humidity}%</h4>\n              <h4>Visibility: {this.state.visibility} mi</h4>\n              <h4>Wind Speed: {this.state.wind_speed} Km/h</h4>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°c\n                </p>\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n        // if weather information not yet loaded. This is the initial loading screen of the app \n      return (\n        <React.Fragment>\n          <div data-testid=\"LoadingCurrentLocation\" className=\"loadingPage\">\n            <img\n              src={loader}\n              alt=\"loading icon\"\n              style={{ width: \"5%\", WebkitUserDrag: \"none\" }}\n            />\n            <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n              Detecting your location\n            </h3>\n            <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n              Location will be displayed with weather...\n            </h3>\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport CurrentLocation from \"./components/CurrentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n\n  return (\n    <React.Fragment>\n      <Nav />\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}